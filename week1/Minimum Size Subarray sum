class Solution {
    //Brute Force 
    public int minSubArrayLen1(int target, int[] nums) {
        int n = nums.length;
        int m_count = Integer.MAX_VALUE;
        for(int i=0; i<n; i++){
            int curr_sum = 0;
            for(int j=i; j<n; j++){
                curr_sum += nums[j];
                if(curr_sum >= target){
                    int count = j-i+1;
                    m_count = Math.min(m_count, count);
                    break;
                }
            }
        }
        return m_count == Integer.MAX_VALUE ? 0 : m_count; 
    }

    //OPTIMAL SOLUTION
    public int minSubArrayLen(int target, int[] nums){
        int n = nums.length;
        int curr_sum = 0;
        int min_window = Integer.MAX_VALUE;

        int left = 0;
        int right = 0;
        while(right < nums.length){
            curr_sum += nums[right];
            right++;

            while(curr_sum >= target){
                int current_window_size = right-left;

                min_window = Math.min(min_window, current_window_size);

                curr_sum -= nums[left];
                left++;
            }
        }

        return min_window == Integer.MAX_VALUE ? 0: min_window;
    }
}
