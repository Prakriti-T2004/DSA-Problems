class Solution {
    //Approach 1 

    public int majorityElement1(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        return nums[n/2];
    }


    //Approach2 Using HashMap(time complexity = O(n), Space Complexity = O(n ))

    public int majorityElement2(int[] nums){
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            map.put(nums[i], map.getOrDefault(nums[i],0)+1);
            if(map.get(nums[i]) > nums.length/2){
                return nums[i];
            }
        }
        return 0;
    }


    //Approach3: Moore's voting algorithm(Optimal)

    public int majorityElement(int[] nums){
        int candidate = nums[0];
        int count = 1;

        for(int i=1; i < nums.length; i++){
            if(nums[i] == candidate){
                count++;
            }
            else{
                count--;
            }
            if(count == 0){
                candidate = nums[i];
                count = 1;
            }
        }
        return candidate;
    }
}
