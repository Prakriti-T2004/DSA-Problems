class Solution {
    //Brute force approach
    public int subarraySum1(int[] nums, int k) {
        int n = nums.length;
        int count = 0;
        for(int i=0; i<n; i++){
            int sum = 0; 
            for(int j=i; j<n; j++){
                sum += nums[j];
                if(sum == k){
                    count++;
                }
            }
        }
        return count;
    }


    //Approach 2(Optimal)
    //HashMap and Prefix sums: time complexity=O(n)

    public int subarraySum2(int[] nums, int k){
        int n = nums.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0,1);
        int count = 0;
        int sum = 0;

        for(int i=0; i<n; i++){
            sum += nums[i];

            if(map.containsKey(sum-k)){
                count += map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0)+1);
        }
        return count;
    }
}
