class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null){
            return root;
        }
        if(key < root.val){
            root.left = deleteNode(root.left, key);
        }
         else if(key > root.val){
            root.right = deleteNode(root.right, key);
        }
        else{
            if(root.left == null && root.right == null){
                return null;
            }
            // Single child case
            if(root.left == null){
                return root.right;
            }
            else if(root.right == null){
                return root.left;
            }
            else{
                // 2 child case
                // Inorder predecessor
                TreeNode node = findPredecessor(root.left);
                // Shift the node
                root.val = node.val;
                // Delete the node.val
                root.left = deleteNode(root.left, node.val);
            }
        }
        return root;
    }
    public TreeNode findPredecessor(TreeNode node){
        while(node.right != null){
            node = node.right;
        }
        return node;
    }
}
